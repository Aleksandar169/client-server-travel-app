/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import domain.Transport;
import domain.Trip;
import domain.User;
import java.io.IOException;
import java.net.SocketException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import logic.Controller;

/**
 *
 * @author Lenovo
 */
public class AddTrip extends javax.swing.JFrame {

    User user;
    UserForm uf;
    Trip t;

    /**
     * Creates new form AddTrip
     */
    public AddTrip() {
        initComponents();
        populateCombo();
        this.setLocationRelativeTo(null);
        jButton1.setVisible(false);
        btnChange.setVisible(false);

    }

    AddTrip(User user, UserForm uf) {
       
        setLocationRelativeTo(null);
        this.user = user;
        this.uf = uf;
        initComponents();
         btnPrevious.setVisible(false);
         this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        populateCombo();
        btnNo.setVisible(false);
        btnChange.setVisible(false);
        txtName.setText(user.getName());
        txtLastname.setText(user.getLastname());
        txtJMBG.setText(user.getJmbg());
        txtPassport.setText(user.getPassportNo());
        txtName.setEditable(false);
        txtLastname.setEditable(false);
        txtJMBG.setEditable(false);
        txtPassport.setEditable(false);

    }

    public AddTrip(UserForm uf, Trip t, User user) {
        initComponents();
        populateCombo();
        btnPrevious.setVisible(false);
        populate(t);
        this.t = t;
        this.uf = uf;
        this.setLocationRelativeTo(null);
        this.user = user;
        
        uf.populateTable();

        btnNo.setVisible(false);
        jButton1.setVisible(false);

        txtName.setText(user.getName());
        txtLastname.setText(user.getLastname());
        txtJMBG.setText(user.getJmbg());
        txtPassport.setText(user.getPassportNo());
        txtName.setEditable(false);
        txtLastname.setEditable(false);
        txtJMBG.setEditable(false);
        txtPassport.setEditable(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtLastname = new javax.swing.JTextField();
        txtDestination = new javax.swing.JTextField();
        txtDate = new javax.swing.JTextField();
        txtExitDate = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtPassport = new javax.swing.JTextField();
        txtJMBG = new javax.swing.JTextField();
        btnNo = new javax.swing.JButton();
        btnChange = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Name:");

        jLabel2.setText("Lastname:");

        jLabel3.setText("Destination:");

        jLabel4.setText("EntryDate:");

        jLabel5.setText("ExitDate:");

        jLabel6.setText("Transport:");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setText("AddTrip:");

        txtLastname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLastnameActionPerformed(evt);
            }
        });

        txtDestination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDestinationActionPerformed(evt);
            }
        });

        txtDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDateActionPerformed(evt);
            }
        });

        txtExitDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtExitDateActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton1.setText("ADD");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel8.setText("JMBG:");

        jLabel9.setText("PassportNo:");

        btnNo.setText("ADD");
        btnNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNoActionPerformed(evt);
            }
        });

        btnChange.setText("Change");
        btnChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeActionPerformed(evt);
            }
        });

        btnPrevious.setText("Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnNo)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnChange)
                .addGap(90, 90, 90))
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(75, 75, 75)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtName)
                    .addComponent(txtLastname)
                    .addComponent(txtDestination)
                    .addComponent(txtDate)
                    .addComponent(txtExitDate)
                    .addComponent(jComboBox1, 0, 141, Short.MAX_VALUE)
                    .addComponent(txtPassport)
                    .addComponent(txtJMBG))
                .addGap(0, 102, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnPrevious))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(btnPrevious))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtLastname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtJMBG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtPassport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtExitDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnChange)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtLastnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLastnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLastnameActionPerformed

    private void txtDestinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDestinationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDestinationActionPerformed

    private void txtDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDateActionPerformed

    private void txtExitDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtExitDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtExitDateActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String name = txtName.getText().trim();
        String lastname = txtLastname.getText().trim();
        String jmbg = txtJMBG.getText().trim();
        String passportNo = txtPassport.getText().trim();
        String destination = txtDestination.getText().trim();
        LocalDate entry;
        LocalDate exit;
        Transport transport = (Transport) jComboBox1.getSelectedItem();

        try {
            entry = LocalDate.parse(txtDate.getText(), DateTimeFormatter.ofPattern("dd.MM.yyyy."));
            exit = LocalDate.parse(txtExitDate.getText(), DateTimeFormatter.ofPattern("dd.MM.yyyy."));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Date should be in dd.MM.yyyy. format!", "Date-Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (entry.isBefore(LocalDate.now()) || exit.isBefore(entry)) {
            JOptionPane.showMessageDialog(rootPane, "Date is inncorect!", "Date-Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (ChronoUnit.DAYS.between(entry, exit) > 90) {
            JOptionPane.showMessageDialog(rootPane, "You can stay in EU max 90days! ", "Date-Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (jmbg == null || !jmbg.matches("\\d{13}")) {
            JOptionPane.showMessageDialog(rootPane, "JMBG is inncorect!", "JMBG-Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (passportNo == null || !passportNo.matches("[A-Z0-9]{8,9}")) {
            JOptionPane.showMessageDialog(rootPane, "PassportNO is inncorect!", "PassportNo-Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(destination==null){
            JOptionPane.showMessageDialog(this, "You should write destination!", "Destination-Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Trip trip = new Trip(name, lastname, jmbg, passportNo, destination, entry, exit, transport);

        try {

            Controller.getInstance().addTrip(trip);
            uf.populateTable();
             JOptionPane.showMessageDialog(this, "Trip added successfully!", "Info", JOptionPane.INFORMATION_MESSAGE);

        } catch (SocketException ex) {
            
            JOptionPane.showMessageDialog(this, ex.getMessage(), "LOgIn-Error", JOptionPane.ERROR_MESSAGE);
//           this.dispose();
//           mf.dispose();
            System.exit(0);
            return;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "LOgIn-Error", JOptionPane.ERROR_MESSAGE);
        }

        this.dispose();


    }//GEN-LAST:event_jButton1ActionPerformed

    
    
    private void btnNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNoActionPerformed
        // TODO add your handling code here:
        String name = txtName.getText().trim();
        String lastname = txtLastname.getText().trim();
        String jmbg = txtJMBG.getText().trim();
        String passportNo = txtPassport.getText();
        String destination = txtDestination.getText().trim();
        LocalDate entry;
        LocalDate exit;
        Transport transport = (Transport) jComboBox1.getSelectedItem();
        
         if(destination==null  || name==null || lastname==null || destination.equals("") || name.equals("") || lastname.equals("")){
            JOptionPane.showMessageDialog(this, "All fields are required!", "Destination-Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            entry = LocalDate.parse(txtDate.getText(), DateTimeFormatter.ofPattern("dd.MM.yyyy."));
            exit = LocalDate.parse(txtExitDate.getText(), DateTimeFormatter.ofPattern("dd.MM.yyyy."));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Date should be in dd.MM.yyyy. format!", "Date-Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (entry.isBefore(LocalDate.now()) || exit.isBefore(entry)) {
            JOptionPane.showMessageDialog(rootPane, "Date is inncorect!", "Date-Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (ChronoUnit.DAYS.between(entry, exit) > 90) {
            JOptionPane.showMessageDialog(rootPane, "You can stay in EU max 90days! ", "Date-Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (jmbg == null || !jmbg.matches("\\d{13}")) {
            JOptionPane.showMessageDialog(rootPane, "JMBG is inncorect!", "JMBG-Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (passportNo == null || !passportNo.matches("[A-Z0-9]{8,9}")) {
            JOptionPane.showMessageDialog(rootPane, "PassportNO is inncorect!", "PassportNo-Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
       

        Trip trip = new Trip(name, lastname, jmbg, passportNo, destination, entry, exit, transport);

        try {

            Controller.getInstance().addTrip(trip);
             JOptionPane.showMessageDialog(this, "Trip added successfully!", "Info", JOptionPane.INFORMATION_MESSAGE);
            // uf.populateTable();
             this.dispose();
             MainForm mf=new MainForm();
             mf.setVisible(true);
        } catch (SocketException ex) {
            
            JOptionPane.showMessageDialog(this, ex.getMessage(), "LOgIn-Error", JOptionPane.ERROR_MESSAGE);
//           this.dispose();
//           mf.dispose();
            System.exit(0);
            return;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "LOgIn-Error", JOptionPane.ERROR_MESSAGE);
        }

        //this.dispose();
    }//GEN-LAST:event_btnNoActionPerformed
    //////CHANGEEE
    private void btnChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeActionPerformed
        // TODO add your handling code here:
        String name = txtName.getText();
        String lastname = txtLastname.getText();
        String jmbg = txtJMBG.getText();
        String passportNo = txtPassport.getText();
        String destination = txtDestination.getText();
        LocalDate entry;
        LocalDate exit;
        Transport transport = (Transport) jComboBox1.getSelectedItem();

        try {
            entry = LocalDate.parse(txtDate.getText(), DateTimeFormatter.ofPattern("dd.MM.yyyy."));
            exit = LocalDate.parse(txtExitDate.getText(), DateTimeFormatter.ofPattern("dd.MM.yyyy."));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Date should be in dd.MM.yyyy. format!", "Date-Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (entry.isBefore(LocalDate.now()) || exit.isBefore(entry)) {
            JOptionPane.showMessageDialog(rootPane, "Date is inncorect!", "Date-Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (ChronoUnit.DAYS.between(entry, exit) > 90) {
            JOptionPane.showMessageDialog(rootPane, "You can stay in EU max 90days! ", "Date-Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

 
        //Trip trip = new Trip(name, lastname, jmbg, passportNo, destination, entry, exit, transport);
        //System.out.println(trip.toString());
        t.setDestination(destination);
        t.setEntryDate(entry);
        t.setExitDate(exit);
        t.setTransport(transport);
        
        System.out.println(t.toString());
        try {

            Controller.getInstance().changeTrip(t);
            uf.populateTable();
             JOptionPane.showMessageDialog(this, "Trip changed successfully!", "Info", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();

        } catch (SocketException ex) {
            
            JOptionPane.showMessageDialog(this, ex.getMessage(), "LOgIn-Error", JOptionPane.ERROR_MESSAGE);
//           this.dispose();
//           mf.dispose();
            System.exit(0);
            return;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "LOgIn-Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_btnChangeActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        // TODO add your handling code here:
        MainForm mf=new MainForm();
        mf.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnPreviousActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(AddTrip.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(AddTrip.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(AddTrip.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(AddTrip.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new AddTrip(user).setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChange;
    private javax.swing.JButton btnNo;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtDestination;
    private javax.swing.JTextField txtExitDate;
    private javax.swing.JTextField txtJMBG;
    private javax.swing.JTextField txtLastname;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPassport;
    // End of variables declaration//GEN-END:variables

    private void populateCombo() {
        jComboBox1.setModel(new DefaultComboBoxModel(Transport.values()));
        //jComboBox1.setSelectedIndex(-1);
    }

    private void populate(Trip t) {
//        txtName.setText(t.getName());
//        txtLastname.setText(t.getLastname());
        txtDestination.setText(t.getDestination());
//        txtJMBG.setText(t.getJmbg());
//        txtPassport.setText(t.getPassportno());

     
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy.");

        txtExitDate.setText(t.getExitDate().format(formatter));
        txtDate.setText(t.getEntryDate().format(formatter));
        jComboBox1.setSelectedItem(t.getTransport());
        

    }
}
